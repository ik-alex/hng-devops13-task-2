user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$request_time" "$upstream_response_time" "$upstream_addr"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;

    upstream backend {
        # Primary (fast fail detection)
        server ${PRIMARY_HOST}:${PRIMARY_PORT} max_fails=1 fail_timeout=2s;
        # Backup - will be used when primary fails
        server ${BACKUP_HOST}:${BACKUP_PORT} backup;
    }

    server {
        listen 8080;

        # Proxy /version and other endpoints to the backend upstream
        location / {
            # We want the client to never see stripped X-App-Pool/X-Release-Id headers.
            # Do not use proxy_hide_header for those.
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass_request_headers on;

            # Timeouts - keep each request under the required limit
            proxy_connect_timeout 1s;
            proxy_send_timeout 5s;
            proxy_read_timeout 8s;

            # Retry logic: attempt the next upstream on error, timeout, and 5xx responses.
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            # Try at most once more (primary then backup)
            proxy_next_upstream_tries 2;
            # Allow up to ~9s to attempt next upstreams (must be less than your client limit)
            proxy_next_upstream_timeout 9s;

            # Preserve buffering behavior to avoid stripping headers
            proxy_buffering off;
        }

        # Optional: expose a direct health endpoint that proxies /healthz to apps
        location /healthz {
            proxy_pass http://backend/healthz;
            proxy_set_header Host $host;
            proxy_pass_request_headers on;
            proxy_connect_timeout 1s;
            proxy_read_timeout 3s;
        }
    }
}
